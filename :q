#!/usr/bin/env python3
import sys
import ast
import re

__version__ = "1.2.2"
__author__ = "Ryuichi Ueda"
__license__ = "MIT license"
__url__ = "https://github.com/ryuichiueda/py"


def usage():
    print("opy " + __version__, file=sys.stderr)
    print("Copyright 2019 " + __author__, file=sys.stderr)
    print("\nReleased under " + __license__, file=sys.stderr)
    print(__url__, file=sys.stderr)


class Rule:
    def __init__(self, pattern, action, do_exec=False):
        self.pattern = pattern
        self.action = action
        self.do_exec = do_exec


class Parser:
    def parse(self, rules, arg):
        arg = arg.rstrip()
        if arg == "":
            return rules
    
        if arg[-1] == "]":
            rule, remain = self.parse_list_type(arg)
        elif arg[-1] == "}":
            rule, remain = self.parse_proc_type(arg)
        else:
            rule, remain = self.parse_pattern(arg)
    
        if remain == "":
            return [rule] + rules
        else:
            return self.parse([rule] + rules, remain)


    def parse_pattern(self, arg):
        for n in range(len(arg)):
            if arg[-n-1] != ";":
                continue
    
            pat = arg[-n:].strip()
            if self.test_parse(pat):
                return Rule(pat, ""), arg[:-n-1]
            else:
                pass
    
        return Rule(arg, ""), ""


    def parse_list_type(self, arg):
        for n in range(len(arg)-1):
            if arg[-n-1] not in ":;":
                continue
    
            action = arg[-n:].lstrip()
            if not self.test_parse(action):
                continue
    
            if arg[-n-1] != ":":
                return Rule("", action), arg[:-n-1]
    
            try:
                s, r = self.parse_pattern(arg[:-n-1])
                return Rule(s.pattern, arg[-n:]), r
            except:
                continue
    
        if self.test_parse(arg):
            return Rule("", arg), ""
    
        print("parse error", file=sys.stderr)
        sys.exit(1)


    def parse_proc_type(self, arg):
        for n in range(len(arg)-1):
            if arg[-n-1] not in ":;":
                continue
    
            if arg[-n:].lstrip(" ")[0] != "{":
                continue
    
            action = arg[-n:].rstrip("} ").lstrip(" {")
            if not self.test_parse(action):
                continue
    
            if arg[-n-1] != ":":
                return Rule("", action, True), arg[:-n-1]
    
            try:
                s, r = self.parse_pattern(arg[:-n-1])
                return Rule(s.pattern, action, True), r
            except:
                continue
    
        action = arg.lstrip("{ ").rstrip("} ")
        if self.test_parse(action):
            return Rule("", action, True), ""
    
        print("parse error", file=sys.stderr)
        sys.exit(1)


    def test_parse(self, code):
        try:
            ast.parse(code)
            return True
        except:
            return False


#################################################
# data and functions for user
F = []


def r_(rgx, s=None):
    if s is None:
        s = F[0]

    return re.search(rgx, str(s))


def Fs(b, e):
    return " ".join( [str(f) for f in F[b:e+1] ])

#################################################


def to_number(s):
    try:
        return int(s)
    except ValueError:
        try:
            return float(s)
        except ValueError:
            return s


def to_numbers(lst):
    return [to_number(e) for e in lst]


def split_fields(line, str_mode):
    line = line.rstrip('\n')
    if str_mode:
        return [line] + line.split(' ')
    else:
        return [line] + to_numbers(line.split(' '))


def dynamic_module_import(msg):
    module = re.search(r'\'[^\']+\'', str(msg)).group().strip("'")
    try:
        exec("import " + module, globals())
    except NameError:
        print("Name error", file=sys.stderr)
        sys.exit(1)


def print_list(rule, f, glo, loc):
    try:
        lst = eval(rule.action, glo, loc) if rule.action else f[1:]
        print(" ".join([str(e) for e in lst]))
    except NameError as e:
        dynamic_module_import(e)
        print_list(rule, f, glo, loc)


def main_proc(header, begins, normals, ends, files, str_mode):
    global F
    NF = 0
    NR = 0
    FNR = 0

    exec(header)

    for r in begins:
        if r.do_exec:
            exec(r.action)
        else:
            print_list(r, F, globals(), locals())

        sys.stdout.flush()

    if len(normals) == 0:
        sys.exit(0)

    for filename in files:
        if filename == "-":
            h_file = sys.stdin
        else:
            h_file = open(filename, "r")

        FILENAME = filename
        FNR = 0

        for line in h_file:
            F = split_fields(line, str_mode)
            NF = len(F) - 1
            NR += 1
            FNR += 1

            for n, e in enumerate(F):
                exec("F" + str(n) + " = e ")

            for r in normals:
                if r.pattern != "" and not eval(r.pattern):
                    continue

                if r.do_exec:
                    exec(r.action)
                    sys.stdout.flush()
                else:
                    print_list(r, F, globals(), locals())

        h_file.close()

    for r in ends:
        if r.do_exec:
            exec(r.action)
            sys.stdout.flush()
        else:
            print_list(r, F, globals(), locals())


def begin_end_separation(rules):
    begins = [r for r in rules if r.pattern in ["B", "BEGIN"]]
    normals = [r for r in rules if r.pattern not in ["B", "BEGIN", "E", "END"]]
    ends = [r for r in rules if r.pattern in ["E", "END"]]
    return begins, normals, ends


def set_str_mode():
    if "-s" in sys.argv:
        sys.argv.remove("-s")
        return True
     
    return False


def get_header():
    if "-m" in sys.argv:
        pos = sys.argv.index("-m")
        header = sys.argv[pos+1]
        sys.argv.remove("-m")
        sys.argv.remove(header)
        return header

    return ""


if __name__ == "__main__":
    if len(sys.argv) < 2 or sys.argv[1] == "--help":
        usage()
        sys.exit(1)

    str_mode = set_str_mode()
    header = get_header()
    files = sys.argv[2:] if len(sys.argv) > 2 else ["-"]

    #if files == []:
    #    files.append("-")

    rules = Parser().parse([], sys.argv[1])
    begins, normals, ends = begin_end_separation(rules)
    main_proc(header, begins, normals, ends, files, str_mode)
